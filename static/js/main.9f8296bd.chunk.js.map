{"version":3,"sources":["images/vinyls.jpg","API.ts","utils.ts","component/QuestionCard.styles.ts","component/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswer","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f8296bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vinyls.59db3b91.jpg\";","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string,\r\n    correct_answer: string,\r\n    difficulty: string,\r\n    incorrect_answers: string[],\r\n    question: string,\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=12&type=multiple&difficulty=${difficulty}`\r\n    const data = await (await fetch(endpoint)).json();\r\n    // console.log(data);\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer\r\n            ]),\r\n        }\r\n    ))\r\n}","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n\r\n    p{\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps={\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper= styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover{\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button{\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({correct, userClicked})  => \r\n            correct\r\n                ?'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n                : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n    }\r\n`\r\n","import React from 'react';\r\n// Types\r\nimport {AnswerObject} from '../App';\r\n//Styles\r\nimport {Wrapper, ButtonWrapper} from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions\r\n    }) => (\r\n        <Wrapper>\r\n            <p className=\"number\">\r\n                Question: {questionNr} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <ButtonWrapper \r\n                    key = {answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}>\r\n                        <button disabled={userAnswer?true:false} value={answer} onClick={callback}>{answer}</button>\r\n                        {/* <p dangerouslySetInnerHTML={{ __html: answer }}></p> */}\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\n//--\r\nimport BGImage from './images/vinyls.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    *{\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n\r\n`\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, \r\n    .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2x solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start{\r\n        max-width: 200px;\r\n    }\r\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'\n//Components\nimport QuestionCard from './component/QuestionCard'\n// types\nimport { Difficulty, QuestionState } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {  //Muy interesante: para componentes con llamadas a API incluir el async en la arrow function\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setNumber(0);\n    setUserAnswer([]);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //Users answer\n      const answer = e.currentTarget.value;\n      // Check answer \n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      //Save answer in the user answer array\n      const AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswer((prev) => [...prev, AnswerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>HACHE MUSIC QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? (<p className=\"score\">Score: {score}</p>) : null}\n        {loading && (<p>Loading Questions...</p>)}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />)}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}